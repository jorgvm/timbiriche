"use client";

import { botPlayer, generateGameboard } from "@/utils/board";
import { createGameInDatabase } from "@/utils/firebase";
import { checkIfAdmin } from "@/utils/helpers";
import { COOKIES_NAME, getPlayerId, maxPlayerNameLength } from "@/utils/player";
import { playSound } from "@/utils/sound";
import Cookies from "js-cookie";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import formStyles from "./form.module.scss";

/**
 * Form to create a new game
 */
const CreateGame = () => {
  const router = useRouter();

  const [name, setName] = useState("");
  const [loading, setLoading] = useState(false);
  const [gridSize, setGridSize] = useState("3x3");
  const isAdmin = checkIfAdmin(name);

  // Create a new game
  const handleSubmit = async (playAgainstAi: boolean) => {
    // Prevent empty name
    if (name == "") {
      return;
    }

    setLoading(true);

    // Get grid dimension numbers from string
    const [gridWidth, gridHeight] = gridSize.split("x").map((i) => Number(i));

    // Generate game data
    const gameData: Game = playAgainstAi
      ? {
          players: [
            {
              id: getPlayerId(),
              name,
            },
            botPlayer,
          ],
          gameboard: generateGameboard(gridWidth, gridHeight),
          gridWidth,
          gridHeight,
          status: "playing",
          activePlayerId: getPlayerId(),
        }
      : {
          players: [
            {
              id: getPlayerId(),
              name,
            },
          ],
          gameboard: generateGameboard(gridWidth, gridHeight),
          gridWidth,
          gridHeight,
          status: "waiting-for-players",
        };

    // Create new game in Firebase
    await createGameInDatabase(gameData)
      .then((newGameId) => {
        // Navigate to id generated by Firebase
        router.push("/" + newGameId);
      })
      .catch(() => {
        setLoading(false);
      });

    Cookies.set(COOKIES_NAME, name);
    playSound("button");
  };

  useEffect(() => {
    setName(Cookies.get(COOKIES_NAME) || "");
  }, []);

  return (
    <div className={formStyles.centered}>
      <form onSubmit={(e) => e.preventDefault()} className={formStyles.box}>
        <h2>New game</h2>

        <div className={formStyles.formRow}>
          <span className={formStyles.label}>game size:</span>

          <select
            className={formStyles.input}
            value={gridSize}
            onChange={(e) => setGridSize(e.target.value)}
            disabled={loading}
          >
            {isAdmin && <option value="1x1">Tiny</option>}
            <option value="3x3">Small</option>
            <option value="4x4">Medium</option>
            <option value="5x5">Large</option>
          </select>
        </div>

        <div className={formStyles.formRow}>
          <span className={formStyles.label}>your name:</span>

          <input
            type="text"
            value={name}
            className={formStyles.input}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
              setName(e.target.value)
            }
            disabled={loading}
            maxLength={maxPlayerNameLength}
            minLength={3}
            required
          />
        </div>

        <div className={formStyles.cta}>
          <button
            type="button"
            disabled={loading}
            className={formStyles.button}
            onClick={() => handleSubmit(false)}
          >
            Create game
          </button>

          <button
            type="button"
            disabled={loading}
            className={formStyles.button}
            onClick={() => handleSubmit(true)}
          >
            Play against AI!
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateGame;
